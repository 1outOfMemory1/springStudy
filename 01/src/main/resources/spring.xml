<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--配置spring的ioc 把service对象配置进来-->
    <bean id="userService" class="tech.haonan.service.UserServiceImpl">

    </bean>
    <!--spring 中基于xml的aop配置步骤
        1. 把通知的bean也交给spring来管理
        2. 使用aop:config标签表明开始AOP的配置
        3. 使用aop:aspect标签表明配置切面
                    id属性:是给切面提供一个唯一标识
                    ref属性:是指定通知类的bean的id
        4. 在apo:aspect标签的内部使用对应的标签来配置通知的类型
                现在的实例是让printlog方法在切入点方法执行之前执行,所以是前置通知
                aop:before 表示前置通知
                    method属性: 用于指定Logger类中哪一个方法是前置通知
                    pointcut属性: 用于指定切入点表达式,该表达式的含义是指的对业务层那些方法增强
            切入表达式的写法:
                关键字:execution(表达式)
                表达式:
                    访问修饰符 返回值 包名.包名...类名.方法名(参数列表)
                    例子:
                        public void tech.haonan.service.UserServiceImpl.saveUser()
                    实际开发中 的通常写法
                    * tech.haonan.service.UserServiceImpl.*(..)
                    全通配符写法
                        1.public , private 或 protected 可以省略
                            void tech.haonan.service.UserServiceImpl.saveUser()
                        2. 返回值可以使用通配符 表示任意返回值
                            * tech.haonan.service.UserServiceImpl.saveUser()
                        3.包名可以使用通配符 表示任意包 但是有几级包,就需要写几个*
                            * *.*.*.*.saveUser()
                        4. 包名可以使用.. 表示当前包及其子包
                            * *..saveUser()
                        5.类名和方法都可以使用*来表示任意类和方法
                            * *..*() 只执行没有参数的方法
                            方法里
                                如果是基本类型 例如int 直接写 int
                                    * *..*(int)
                                如果是引用类型写包名.类名的方式 java.lang.String
                                    * *..*(java.lang.String)
                            所有有参数函数都执行
                                * *..*(*)
                            所有函数都执行
                                * *..*(..))


                        * *..*.*(..)
    -->
    <!--配置logger类-->
    <bean id="logger" class="tech.haonan.utils.Logger">

    </bean>
    <!--配置aop-->
    <aop:config>
        <!--配置切面-->
        <aop:aspect id="logAdvice"  ref="logger" >
            <!--配置通知的类型,并且建立通知方法和切入点方法的关联-->
                <!--第一个是只对一个方法进行增强  第二个是对所有方法进行增强-->
<!--            <aop:before method="printLog" pointcut="execution(public void tech.haonan.service.UserServiceImpl.saveUser())"/>-->
            <aop:before method="printLog" pointcut="execution(* tech.haonan.service.UserServiceImpl.*(..))"/>
        </aop:aspect>
    </aop:config>
    <!--总结一下
        1.就是有一个类A需要加强  加强类B和它一块作为Bean 被spring自动注入
        2. 配置切面  切面就是要执行的加强代码
        3. 配置 切入点 在saveUser() 方法之前执行方法printlog
    -->
</beans>